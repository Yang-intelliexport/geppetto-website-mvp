---
// File upload and CAD analysis component - English version
---

<section id="file-upload-section" class="py-20 bg-gray-50">
  <div class="container mx-auto px-6">
    <div class="max-w-4xl mx-auto">
      <!-- Title area -->
      <div class="text-center mb-12">
        <h2 class="text-4xl font-bold text-gray-800 mb-4">
          🎯 Upload Your CAD Files
        </h2>
        <p class="text-xl text-gray-600">
          Support multiple formats, AI instantly recognizes and analyzes manufacturing processes
        </p>
      </div>

      <!-- File upload area -->
      <div class="bg-white rounded-3xl shadow-2xl p-8 border-2 border-dashed border-purple-200 hover:border-purple-400 transition-colors duration-300">
        
        <!-- Drag and drop upload area -->
        <div id="upload-zone" class="text-center p-12 cursor-pointer group">
          <div class="mb-6">
            <svg class="w-24 h-24 text-purple-400 mx-auto group-hover:text-purple-600 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
          </div>
          
          <h3 class="text-2xl font-bold text-gray-800 mb-4">
            Drag files here or click to select
          </h3>
          
          <p class="text-gray-600 mb-6">
            Supported formats: STEP, STL, IGES, DWG, DXF, STP, IGS
          </p>
          
          <button type="button" class="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 rounded-full font-semibold hover:from-purple-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105">
            Choose Files
          </button>
          
          <input type="file" id="cad-file-input" multiple accept=".step,.stp,.stl,.iges,.igs,.dwg,.dxf" class="hidden">
        </div>

        <!-- File information display -->
        <div id="file-info" class="hidden mt-6">
          <div class="bg-purple-50 rounded-2xl p-6">
            <h4 class="text-lg font-semibold text-purple-800 mb-4">Selected files:</h4>
            <div id="file-list" class="space-y-3">
              <!-- Dynamically generated file list -->
            </div>
          </div>
        </div>

        <!-- Upload progress -->
        <div id="upload-progress" class="hidden mt-6">
          <div class="bg-blue-50 rounded-2xl p-6">
            <div class="flex items-center justify-between mb-2">
              <span class="text-blue-800 font-semibold">Uploading...</span>
              <span id="progress-text" class="text-blue-600">0%</span>
            </div>
            <div class="w-full bg-blue-200 rounded-full h-3">
              <div id="progress-bar" class="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Three-stage smart quote progress bar -->
      <div id="quote-progress-wrapper" class="hidden mt-8">
        <!-- Progress bar component will be dynamically inserted here -->
      </div>

      <!-- Supported file formats description -->
      <div class="mt-12 bg-white rounded-2xl p-8 shadow-lg">
        <h4 class="text-xl font-bold text-gray-800 mb-6 text-center">🔧 Supported CAD Formats</h4>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div class="text-center p-4 bg-purple-50 rounded-xl">
            <div class="text-2xl font-bold text-purple-600 mb-2">STEP</div>
            <div class="text-sm text-gray-600">Standard Exchange Format</div>
          </div>
          <div class="text-center p-4 bg-blue-50 rounded-xl">
            <div class="text-2xl font-bold text-blue-600 mb-2">STL</div>
            <div class="text-sm text-gray-600">3D Printing Format</div>
          </div>
          <div class="text-center p-4 bg-green-50 rounded-xl">
            <div class="text-2xl font-bold text-green-600 mb-2">IGES</div>
            <div class="text-sm text-gray-600">Engineering Exchange Format</div>
          </div>
          <div class="text-center p-4 bg-orange-50 rounded-xl">
            <div class="text-2xl font-bold text-orange-600 mb-2">DWG</div>
            <div class="text-sm text-gray-600">AutoCAD Format</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Quote progress bar styles */
  .quote-stage {
    position: relative;
  }
  
  .stage-circle {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .quote-stage:hover .stage-circle {
    transform: scale(1.05);
  }
  
  .stage-time {
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .quote-stage:hover .stage-time {
    opacity: 1;
  }
  
  @media (max-width: 768px) {
    .quote-stage {
      margin-bottom: 2rem;
    }
    
    .relative {
      flex-direction: column;
    }
    
    .stage-circle {
      width: 3rem;
      height: 3rem;
    }
    
    #quote-progress-section .absolute {
      display: none;
    }
  }
</style>

<script type="module">
  // Dynamically import CAD processor
  let CADFileProcessor;

  // File upload and processing logic
  document.addEventListener('DOMContentLoaded', async () => {
    const uploadZone = document.getElementById('upload-zone');
    const fileInput = document.getElementById('cad-file-input');
    const fileInfo = document.getElementById('file-info');
    const fileList = document.getElementById('file-list');
    const uploadProgress = document.getElementById('upload-progress');
    const analysisProgress = document.getElementById('analysis-progress');

    // Dynamically import and initialize CAD processor
    try {
      const module = await import('../../scripts/cadFileProcessor.js');
      CADFileProcessor = module.default;
    } catch (error) {
      console.warn('Failed to load CAD processor, using fallback');
      CADFileProcessor = class {
        validateFiles(files) { return { validFiles: Array.from(files), invalidFiles: [], totalErrors: [] }; }
        async processFiles(files, callbacks) {
          callbacks.onStart?.();
          
          // Simulate processing flow
          for (let i = 0; i <= 100; i += 10) {
            await new Promise(resolve => setTimeout(resolve, 100));
            callbacks.onProgress?.({
              stage: i < 50 ? 'upload' : 'analysis',
              progress: i,
              message: i < 50 ? 'Uploading...' : 'Analyzing...',
              currentStep: i < 50 ? 'File Upload' : 'Geometry Analysis'
            });
          }
          
          callbacks.onComplete?.({
            analysis: { summary: { totalCost: 1280, totalMarketPrice: 2560, totalSavings: 1280 } }
          });
          
          return { analysis: { summary: { totalCost: 1280, totalMarketPrice: 2560, totalSavings: 1280 } } };
        }
      };
    }
    
    const cadProcessor = new CADFileProcessor();
    let currentQuoteData = null;

    // Click upload area to trigger file selection
    uploadZone?.addEventListener('click', () => {
      fileInput?.click();
    });

    // File selection handling
    fileInput?.addEventListener('change', handleFileSelection);

    // Drag and drop functionality
    uploadZone?.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadZone.classList.add('bg-purple-50', 'border-purple-400');
    });

    uploadZone?.addEventListener('dragleave', () => {
      uploadZone.classList.remove('bg-purple-50', 'border-purple-400');
    });

    uploadZone?.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadZone.classList.remove('bg-purple-50', 'border-purple-400');
      
      const files = e.dataTransfer?.files;
      if (files) {
        handleFiles(files);
      }
    });

    function handleFileSelection(e) {
      const files = e.target.files;
      if (files) {
        handleFiles(files);
      }
    }

    async function handleFiles(files) {
      // Validate files first
      const validation = cadProcessor.validateFiles(files);
      
      if (validation.totalErrors.length > 0) {
        showErrorMessage(validation.totalErrors.join('<br>'));
        return;
      }

      // Display valid file information
      displayFileInfo(validation.validFiles);
      
      // Start processing files
      try {
        const quoteResult = await cadProcessor.processFiles(validation.validFiles, {
          onStart: handleProcessStart,
          onProgress: handleProcessProgress,
          onComplete: handleProcessComplete,
          onError: handleProcessError
        });

        if (quoteResult) {
          currentQuoteData = quoteResult;
          showResults(quoteResult);
        }
      } catch (error) {
        handleProcessError(error.message);
      }
    }

    function displayFileInfo(files) {
      fileInfo?.classList.remove('hidden');
      fileList.innerHTML = '';

      Array.from(files).forEach((file, index) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between p-3 bg-white rounded-lg border';
        
        const fileExtension = file.name.split('.').pop().toUpperCase();
        const iconColor = getFileIconColor(fileExtension);
        
        fileItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 ${iconColor} rounded-lg flex items-center justify-center">
              <span class="text-white text-xs font-bold">${fileExtension}</span>
            </div>
            <div>
              <div class="font-medium text-gray-800">${file.name}</div>
              <div class="text-sm text-gray-500">${formatFileSize(file.size)}</div>
            </div>
          </div>
          <div class="text-green-600 font-semibold">✓ Selected</div>
        `;
        fileList.appendChild(fileItem);
      });
    }

    function getFileIconColor(extension) {
      const colorMap = {
        'STEP': 'bg-blue-500',
        'STP': 'bg-blue-500',
        'STL': 'bg-purple-500',
        'IGES': 'bg-green-500',
        'IGS': 'bg-green-500',
        'DWG': 'bg-orange-500',
        'DXF': 'bg-orange-500',
        'OBJ': 'bg-pink-500',
        'PLY': 'bg-indigo-500',
        '3MF': 'bg-red-500'
      };
      return colorMap[extension] || 'bg-gray-500';
    }

    function handleProcessStart() {
      console.log('CAD processing started');
      uploadProgress?.classList.remove('hidden');
    }

    function handleProcessProgress(data) {
      const { stage, progress, message, currentFile, currentStep } = data;
      
      if (stage === 'upload') {
        updateUploadProgress(progress, message);
      } else if (stage === 'analysis') {
        showQuoteProgress(progress, message, currentStep);
      } else if (stage === 'quote') {
        updateQuoteProgress(progress, message);
      }
    }

    function handleProcessComplete(data) {
      console.log('CAD processing completed', data);
      // Completion logic will be handled in showResults
    }

    function handleProcessError(error) {
      showErrorMessage(`Processing failed: ${error}`);
      hideAllProgress();
    }

    function updateUploadProgress(progress, message) {
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (progressText) progressText.textContent = `${Math.round(progress)}%`;
      
      if (progress >= 100) {
        setTimeout(() => {
          uploadProgress?.classList.add('hidden');
          initializeQuoteProgress();
        }, 500);
      }
    }

    // Initialize smart quote progress bar
    function initializeQuoteProgress() {
      // Dynamically insert progress bar component HTML
      const progressWrapper = document.getElementById('quote-progress-wrapper');
      if (progressWrapper) {
        progressWrapper.innerHTML = `
          <div id="quote-progress-section" class="py-12">
            <div class="max-w-4xl mx-auto">
              <!-- Progress bar title -->
              <div class="text-center mb-8">
                <h3 class="text-2xl font-bold text-gray-800 mb-4">
                  🚀 Geppetto Smart Quote in Progress
                </h3>
                <p class="text-gray-600">
                  AI + Expert dual guarantee, ensuring accurate and reliable quotes
                </p>
              </div>

              <!-- Three-stage progress bar -->
              <div class="relative">
                <!-- Progress line -->
                <div class="absolute top-1/2 left-0 right-0 h-1 bg-gray-200 rounded-full transform -translate-y-1/2 z-0">
                  <div id="progress-line" class="h-full bg-gradient-to-r from-purple-500 to-blue-500 rounded-full transition-all duration-1000 ease-out" style="width: 0%"></div>
                </div>
                
                <!-- Three stages -->
                <div class="relative flex justify-between items-center z-10">
                  
                  <!-- Stage 1: AI Calculation -->
                  <div class="quote-stage flex flex-col items-center group" id="stage-1">
                    <div class="stage-circle w-16 h-16 rounded-full border-4 border-gray-300 bg-white flex items-center justify-center mb-4 transition-all duration-500 shadow-lg">
                      <div class="stage-icon hidden">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                      </div>
                      <div class="stage-spinner hidden">
                        <svg class="w-8 h-8 text-purple-600 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                      </div>
                      <div class="stage-number text-gray-400 font-bold text-xl">1</div>
                    </div>
                    
                    <div class="text-center max-w-xs">
                      <h4 class="font-bold text-gray-800 mb-2">🤖 AI Smart Calculation</h4>
                      <p class="text-sm text-gray-600 mb-1">Geometry Analysis + Process Recognition</p>
                      <div class="stage-time text-xs text-purple-600 font-semibold mt-2">Est: 1-2 sec</div>
                    </div>
                  </div>

                  <!-- Stage 2: Expert Optimization Review -->
                  <div class="quote-stage flex flex-col items-center group" id="stage-2">
                    <div class="stage-circle w-16 h-16 rounded-full border-4 border-gray-300 bg-white flex items-center justify-center mb-4 transition-all duration-500 shadow-lg">
                      <div class="stage-icon hidden">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                      </div>
                      <div class="stage-spinner hidden">
                        <svg class="w-8 h-8 text-blue-600 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                        </svg>
                      </div>
                      <div class="stage-number text-gray-400 font-bold text-xl">2</div>
                    </div>
                    
                    <div class="text-center max-w-xs">
                      <h4 class="font-bold text-gray-800 mb-2">👨‍🔬 Expert Optimization Review</h4>
                      <p class="text-sm text-gray-600 mb-1">Quality Control + Cost Optimization</p>
                      <div class="stage-time text-xs text-blue-600 font-semibold mt-2">Est: 1-2 sec</div>
                    </div>
                  </div>

                  <!-- Stage 3: Generate Quote -->
                  <div class="quote-stage flex flex-col items-center group" id="stage-3">
                    <div class="stage-circle w-16 h-16 rounded-full border-4 border-gray-300 bg-white flex items-center justify-center mb-4 transition-all duration-500 shadow-lg">
                      <div class="stage-icon hidden">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                      </div>
                      <div class="stage-spinner hidden">
                        <svg class="w-8 h-8 text-green-600 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                      </div>
                      <div class="stage-number text-gray-400 font-bold text-xl">3</div>
                    </div>
                    
                    <div class="text-center max-w-xs">
                      <h4 class="font-bold text-gray-800 mb-2">📋 Generate Precise Quote</h4>
                      <p class="text-sm text-gray-600 mb-1">Detailed List + Delivery Commitment</p>
                      <div class="stage-time text-xs text-green-600 font-semibold mt-2">Est: 1 sec</div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Current status display -->
              <div class="mt-8 text-center">
                <div id="current-status" class="bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-6">
                  <div class="flex items-center justify-center space-x-3 mb-4">
                    <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
                      <svg class="w-5 h-5 text-white animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                    </div>
                    <h4 id="status-title" class="text-lg font-bold text-gray-800">Starting AI analysis engine...</h4>
                  </div>
                  
                  <p id="status-message" class="text-gray-600 mb-4">
                    Please wait, our AI + expert team is generating the optimal quote solution for you
                  </p>
                  
                  <div class="flex items-center justify-center space-x-4 text-sm text-gray-500">
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span>AI algorithm running</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                      <span>Expert standby review</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>
                      <span>Expected completion: <span id="total-eta">5 sec</span></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        
        progressWrapper.classList.remove('hidden');
        
        // Start progress bar animation
        setTimeout(() => startQuoteProgressFlow(), 1000);
      }
    }

    // Start smart quote process flow
    function startQuoteProgressFlow() {
      // Stage 1: AI calculation (2 seconds)
      setTimeout(() => setStageActive(1), 500);
      setTimeout(() => completeStage(1), 2500);
      
      // Stage 2: Expert review (1.5 seconds)
      setTimeout(() => setStageActive(2), 3000);
      setTimeout(() => completeStage(2), 4500);
      
      // Stage 3: Generate quote (1 second)
      setTimeout(() => setStageActive(3), 5000);
      setTimeout(() => completeStage(3), 6000);
      
      // Complete
      setTimeout(() => finishQuoteProcess(), 6500);
    }

    function setStageActive(stageNumber) {
      const stageElement = document.getElementById(`stage-${stageNumber}`);
      if (!stageElement) return;

      const circle = stageElement.querySelector('.stage-circle');
      const number = stageElement.querySelector('.stage-number');
      const spinner = stageElement.querySelector('.stage-spinner');
      
      // Set circle to active state
      const colors = ['purple', 'blue', 'green'];
      const color = colors[stageNumber - 1];
      circle.className = `stage-circle w-16 h-16 rounded-full border-4 border-${color}-500 bg-${color}-50 flex items-center justify-center mb-4 transition-all duration-500 shadow-lg`;
      
      // Hide number, show loading animation
      number.classList.add('hidden');
      spinner.classList.remove('hidden');
      
      // Update progress line
      const progressPercentage = ((stageNumber - 1) / 3) * 100;
      const progressLine = document.getElementById('progress-line');
      if (progressLine) {
        progressLine.style.width = `${progressPercentage}%`;
      }
      
      // Update status information
      updateProgressStatus(stageNumber);
    }

    function completeStage(stageNumber) {
      const stageElement = document.getElementById(`stage-${stageNumber}`);
      if (!stageElement) return;

      const circle = stageElement.querySelector('.stage-circle');
      const icon = stageElement.querySelector('.stage-icon');
      const spinner = stageElement.querySelector('.stage-spinner');
      
      // Set circle to completed state
      const colors = ['purple', 'blue', 'green'];
      const color = colors[stageNumber - 1];
      circle.className = `stage-circle w-16 h-16 rounded-full border-4 border-${color}-500 bg-${color}-500 flex items-center justify-center mb-4 transition-all duration-500 shadow-lg`;
      
      // Hide loading animation, show completion icon
      spinner.classList.add('hidden');
      icon.classList.remove('hidden');

      // Update progress line
      const progressPercentage = (stageNumber / 3) * 100;
      const progressLine = document.getElementById('progress-line');
      if (progressLine) {
        progressLine.style.width = `${progressPercentage}%`;
      }
    }

    function updateProgressStatus(stageNumber) {
      const statusTitle = document.getElementById('status-title');
      const statusMessage = document.getElementById('status-message');
      const totalEta = document.getElementById('total-eta');
      
      const stageInfo = {
        1: {
          title: '🤖 AI smart analysis in progress...',
          message: 'AI algorithm is parsing your CAD files, analyzing geometric structure and manufacturing process requirements',
          eta: '4 sec'
        },
        2: {
          title: '👨‍🔬 Expert optimization review...',
          message: 'Senior engineers are validating AI analysis results, optimizing cost structure and process solutions',
          eta: '2 sec'
        },
        3: {
          title: '📋 Generating precise quote...',
          message: 'Integrating analysis results, generating detailed quote and delivery commitment',
          eta: '1 sec'
        }
      };
      
      const info = stageInfo[stageNumber];
      if (info && statusTitle && statusMessage && totalEta) {
        statusTitle.textContent = info.title;
        statusMessage.textContent = info.message;
        totalEta.textContent = info.eta;
      }
    }

    function finishQuoteProcess() {
      const statusTitle = document.getElementById('status-title');
      const statusMessage = document.getElementById('status-message');
      const totalEta = document.getElementById('total-eta');
      
      if (statusTitle) statusTitle.textContent = '✅ Quote generation complete!';
      if (statusMessage) statusMessage.textContent = 'Congratulations! Your smart quote is ready, please check the detailed results below.';
      if (totalEta) totalEta.textContent = 'Completed';
      
      // Hide progress bar and show results after 3 seconds
      setTimeout(() => {
        const progressWrapper = document.getElementById('quote-progress-wrapper');
        if (progressWrapper) {
          progressWrapper.classList.add('hidden');
        }
        showResults({ analysis: { summary: { totalCost: 1280, totalMarketPrice: 2560, totalSavings: 1280 } } });
      }, 2000);
    }

    function showQuoteProgress(progress, message, currentStep) {
      // This function is now handled by the new progress bar system
      console.log('Quote progress:', progress, message, currentStep);
    }

    function updateQuoteProgress(progress, message) {
      // This function is now handled by the new progress bar system
      console.log('Quote update:', progress, message);
    }

    function showResults(quoteData) {
      hideAllProgress();
      
      // Update results page data
      updateResultsPage(quoteData);
      
      // Show results area
      const resultsSection = document.getElementById('quote-results');
      if (resultsSection) {
        resultsSection.classList.remove('hidden');
        resultsSection.scrollIntoView({ behavior: 'smooth' });
      }
    }

    function updateResultsPage(quoteData) {
      const { analysis } = quoteData;
      const { summary } = analysis;
      
      // Update price information
      const aiPriceEl = document.getElementById('ai-price');
      const marketPriceEl = document.getElementById('market-price');
      const savingsEl = document.getElementById('savings');
      const savingsAmountEl = document.getElementById('savings-amount');
      
      if (aiPriceEl) aiPriceEl.textContent = summary.totalCost.toLocaleString();
      if (marketPriceEl) marketPriceEl.textContent = summary.totalMarketPrice.toLocaleString();
      if (savingsAmountEl) savingsAmountEl.textContent = summary.totalSavings.toLocaleString();
      
      const savingsPercentage = Math.round((summary.totalSavings / summary.totalMarketPrice) * 100);
      if (savingsEl) savingsEl.textContent = `${savingsPercentage}%`;
      
      // Can continue updating other results page elements...
      console.log('Results updated with quote data:', quoteData);
    }

    function showErrorMessage(message) {
      // Create error notification
      const errorDiv = document.createElement('div');
      errorDiv.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded-xl';
      errorDiv.innerHTML = `
        <div class="flex items-start space-x-3">
          <svg class="w-6 h-6 text-red-500 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <div>
            <h4 class="text-red-800 font-semibold mb-1">File processing failed</h4>
            <div class="text-red-700 text-sm">${message}</div>
          </div>
        </div>
      `;
      
      // Insert after file upload area
      const uploadSection = document.getElementById('file-upload-section');
      if (uploadSection) {
        const container = uploadSection.querySelector('.container > div');
        if (container) {
          container.appendChild(errorDiv);
          
          // Auto-remove after 3 seconds
          setTimeout(() => {
            errorDiv.remove();
          }, 5000);
        }
      }
    }

    function hideAllProgress() {
      uploadProgress?.classList.add('hidden');
      const progressWrapper = document.getElementById('quote-progress-wrapper');
      progressWrapper?.classList.add('hidden');
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Export to global scope for other components to use
    window.currentQuoteData = () => currentQuoteData;
  });
</script>